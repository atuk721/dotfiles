[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chemzqm/denite-git'
on_cmd = 'Denite'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']

#[[plugins]]
#repo = 'eagletmt/ghcmod-vim'
#on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = ['javascript']

[[plugins]]
repo = 'jeroenbourgois/vim-actionscript'
on_ft = ['actionscript', 'mxml']

#[[plugins]]
#repo = 'lvht/phpcd.vim'
#on_ft = ['php']
#hook_add = '''
#  let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
#  let g:deoplete#ignore_sources.php = ['omni']
#'''

[[plugins]]
repo = 'mattn/jscomplete-vim'
hook_post_source = '''
  autocmd FileType javascript :setl omnifunc=jscomplete#CompleteJS 
  let g:jscomplete_use = ['dom', 'moz']
'''
on_ft = ['javascript']

[[plugins]]
repo = 'myhere/vim-nodejs-complete'
on_ft = ['javascript']

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'nishigori/vim-php-dictionary'
on_ft = ['php']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
  set hidden
  let g:racer_cmd = '$HOME/.cargo/bin/racer'
'''
on_ft = ['rust']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  nnoremap <silent> <Leader>l :<C-u>Denite line<CR>
  "nnoremap <silent> <Leader>y :<C-u>Denite neoyank<CR>
  nnoremap <silent> <Leader>b :<C-u>Denite buffer<CR>
  nnoremap <silent> <Leader>z :<C-u>Denite -resume<CR>
  nnoremap <silent> <Leader>; :<C-u>Denite -resume -immediately -select=+1<CR>
  nnoremap <silent> <Leader>: :<C-u>Denite -resume -immediately -select=-1<CR>
  nnoremap <silent> <Leader>g :<C-u>Denite grep<CR>
  nnoremap <silent> <Leader>cg :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> <Leader>e :<C-u>Denite file/rec<CR>
  nnoremap <silent> <Leader>r :<C-u>Denite register -buffer-name=register<CR>
  nnoremap <silent> <Leader>m :<C-u>Denite file_mru<CR>
  nnoremap <silent> <Leader>u :<C-u>Denite buffer file_mru<CR>

  " Set for cpsm.
  "set runtimepath+=~/.config/nvim/dein/repos/github.com/nixprime/cpsm/
'''

hook_source = '''
  " Change mappings.
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>','noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>','noremap')
  call denite#custom#map('insert', '<C-r>', '<denite:toggle_matchers:matcher_substring>', 'noremap')
  call denite#custom#map('insert', '<C-s>', '<denite:toggle_sorters:sorter_reverse>', 'noremap')

  " Use rg.
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!*.git', '--glob', '!*node_modules*'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])

  " Change matcher.
  "call denite#custom#source('file/rec,grep', 'matchers', ['matcher_cpsm'])

  call denite#custom#option('default', {
      \ 'auto_accel': v:true,
      \ 'prompt': '>',
      \ 'source_names': 'short',
      \ })

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'target/', 'node_modules/'])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  "" <TAB>: completion.
  "inoremap <silent><expr> <TAB>
  "      \ pumvisible() ? "\<C-n>" :
  "      \ <SID>check_back_space() ? "\<TAB>" :
  "      \ deoplete#manual_complete()
  "function! s:check_back_space() abort "{{{
  "  let col = col('.') - 1
  "  return !col || getline('.')[col - 1]  =~ '\s'
  "endfunction"}}}

  "" <S-TAB>: completion back.
  "inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

  "" <C-h>, <BS>: close popup and delete backword char.
  "inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  "inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

  "" inoremap <expr><C-g> deoplete#undo_completion()
  "" <C-l>: redraw candidates
  "inoremap <expr><C-g>       deoplete#refresh()
  "inoremap <silent><expr><C-l>       deoplete#complete_common_string()

  "" <CR>: close popup and save indent.
  "inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  "function! s:my_cr_function() abort
  "  return deoplete#cancel_popup() . "\<CR>"
  "endfunction

  "inoremap <expr> '  pumvisible() ? deoplete#close_popup() : "'"
'''

hook_post_source = '''
  "call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])
  call deoplete#custom#source('_', 'sorters', [])
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  let g:neosnippet#snippets_directory='~/.config/nvim/snippets/'
'''

#[[plugins]]
#repo = 'tpope/vim-rails'
#on_ft = ['ruby']

